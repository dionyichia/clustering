#ifndef SINGLE_LINKAGE_HPP
#define SINGLE_LINKAGE_HPP

#include <vector>
#include <iostream>
#include "kd_tree/include/types.hpp"  // Include for Edge definition

enum class clusterMethod{
    EOM,
    Leaf
};

// Struct for Cluster Output Comparison 
struct ClusterMetrics {
    double adjusted_rand_index;
    double normalized_mutual_info;
    double homogeneity;
    double completeness;
    double v_measure;
    double accuracy;  // Best matching accuracy
    int total_points;
    int num_predicted_clusters;
    int num_true_clusters;
};

// Structure to hold cluster selection choices
struct ClusterChoice {
    float total_stability;
    std::vector<int> selected_clusters;
    
    // default c-tor
    ClusterChoice() : total_stability(0.0f) {}

    // c-tor with arguments
    ClusterChoice(float stab, std::vector<int> clusters) 
        : total_stability(stab), selected_clusters(std::move(clusters)) {}
};

// Function to perform single linkage clustering
std::vector<std::vector<int>> single_linkage_clustering(
    const std::vector<Edge>& mst_edges,
    int N_pts,
    int min_cluster_size = 2,
    clusterMethod clusterMethod = clusterMethod::EOM
);

__global__ void finalize_stability_kernel(
    const int* parent,
    const int* sz,
    const float* birth_lambda,
    const float* death_lambda,
    float* stability,
    int num_clusters,
    float lambda_max,
    float lambda_min
);

void parallel_finalize_stability(
    std::vector<int>& parent,
    std::vector<int>& sz,
    std::vector<float>& birth_lambda,
    std::vector<float>& death_lambda,
    std::vector<float>& stability,
    float lambda_max,
    float lambda_min
);

const char* clusterMethodName(clusterMethod m);

// Helper function to collect members (can be made internal if not needed elsewhere)
void collect_members(int c,
                     int N_pts,
                     const std::vector<int>& left_child,
                     const std::vector<int>& right_child,
                     std::vector<int>& out);


/**
 * Evaluate clustering results against ground truth labels
 * @param true_labels: Ground truth cluster labels from CSV
 * @param predicted_clusters: Clusters generated by single linkage algorithm
 * @param total_points: Total number of data points
 * @return ClusterMetrics structure with various evaluation metrics
 */
ClusterMetrics evaluateClustering(const std::vector<int>& true_labels,
                                const std::vector<std::vector<int>>& predicted_clusters,
                                int total_points);

/**
 * Print clustering evaluation results
 */
void printClusteringEvaluation(const ClusterMetrics& metrics, bool quiet_mode = false);


#endif // SINGLE_LINKAGE_HPP